/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'jay' at '07/05/14 9:21 AM' with Gradle 1.12
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/1.12/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
//apply plugin: 'distribution'
//apply plugin: 'java-library-distribution'

//apply plugin:'application'
//mainClassName = "org.gradle.sample.Main"

version = '1.0b'

jar {
    baseName = 'sugar-framework'
    version =  version
}

task buildDist(type: Copy) {
    into "build/dependency-lib"
    from configurations.compile
}

task uberJar(type: Jar) {
    baseName = project.name + '-uber'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

publishing {
        publications {
            maven(MavenPublication) {

                groupId 'org.sugarframework'
                artifactId 'core'
                version '1.0-beta'

                from components.java
            }
        }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/web'
        }
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'maven central' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    	// The production code uses the SLF4J logging API at compile time
	compile 'org.eclipse.jetty:jetty-server:9.2.0.M1'
	compile 'org.eclipse.jetty:jetty-webapp:9.2.0.M1'
        compile 'org.eclipse.jetty:jetty-servlet:9.2.0.M1'
	compile 'org.eclipse.jetty:jetty-util:9.2.0.M1'

	compile 'org.reflections:reflections:0.9.9-RC1'
        compile 'jstl:jstl:1.2'
	compile 'org.mortbay.jetty:jsp-2.1-glassfish:2.1.v20100127'
	compile 'commons-beanutils:commons-beanutils:1.8.3'
        compile 'commons-collections:commons-collections:3.2.1'
        compile 'commons-logging:commons-logging:1.1.3'
	compile 'org.apache.commons:commons-io:1.3.2'
	compile 'org.slf4j:slf4j-api:1.7.7'
	compile 'org.slf4j:slf4j-log4j12:1.7.7'
	compile 'com.google.code.gson:gson:1.4'
	compile 'com.google.guava:guava:11.0.2'
	compile 'org.codehaus.groovy:groovy:2.3.0'
	compile 'org.codehaus.groovy:groovy-jsr223:2.3.0'
	compile 'org.jsoup:jsoup:1.7.3'

	compile 'org.eclipse.jdt:core:3.3.0-v_771'
        compile 'com.h2database:h2:1.4.178'
	compile 'org.apache.commons:commons-dbcp2:2.0'
	compile 'commons-dbutils:commons-dbutils:1.5'
	compile 'cglib:cglib:3.1'
	compile 'org.apache.shiro:shiro-core:1.2.3'
        compile 'org.apache.shiro:shiro-web:1.2.3'

	compile 'com.github.jknack:handlebars:1.0.0'

    	// Declare the dependency for your favourite test framework you want to use in your tests.
    	// TestNG is also supported by the Gradle Test task. Just change the
    	// testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    	// 'test.useTestNG()' to your build script.
    	testCompile 'junit:junit:4.11'
}
